import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs-extra';
import path from 'path';

const execAsync = promisify(exec);

export default {
  hooks: {
    afterCreate: async (projectPath, config) => {
      console.log('🔍 Analyzing project structure...');
      
      // Analyze code complexity
      const analysis = {
        fileCount: 0,
        totalLines: 0,
        suggestions: [],
      };

      // Count files and lines
      const files = await getFiles(projectPath);
      analysis.fileCount = files.length;
      
      for (const file of files) {
        if (file.endsWith('.ts') || file.endsWith('.js')) {
          const content = await fs.readFile(file, 'utf-8');
          analysis.totalLines += content.split('\n').length;
        }
      }

      // Generate suggestions based on project type
      if (config.template === 'express-api') {
        analysis.suggestions.push(
          '💡 Consider adding middleware for request validation',
          '💡 Implement rate limiting for API endpoints',
          '💡 Add OpenAPI/Swagger documentation'
        );
      } else if (config.template === 'react-vite') {
        analysis.suggestions.push(
          '💡 Set up React Router for navigation',
          '💡 Consider using React Query for data fetching',
          '💡 Add Tailwind CSS for styling'
        );
      }

      // Create analysis report
      const report = `# Project Analysis Report

## Overview
- Total Files: ${analysis.fileCount}
- Total Lines of Code: ${analysis.totalLines}
- Template Used: ${config.template}

## Suggestions
${analysis.suggestions.map(s => `- ${s}`).join('\n')}

## Next Steps
1. Review the generated code structure
2. Implement suggested enhancements
3. Set up continuous integration
4. Add comprehensive tests

Generated by DevForge Code Analysis Plugin
`;

      await fs.writeFile(
        path.join(projectPath, 'ANALYSIS.md'),
        report
      );
      
      console.log('✅ Code analysis complete! See ANALYSIS.md');
    }
  }
};

async function getFiles(dir, files = []) {
  const items = await fs.readdir(dir);
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = await fs.stat(fullPath);
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      await getFiles(fullPath, files);
    } else if (stat.isFile()) {
      files.push(fullPath);
    }
  }
  return files;
}
